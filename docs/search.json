[
  {
    "objectID": "R_Shinylive_2.html",
    "href": "R_Shinylive_2.html",
    "title": "R Shinyliveapp 2",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 900\nui &lt;- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"n\", \"Gruppengröße\", min = 0, max = 100, value = 20),\n      sliderInput(\"d\", \"Cohen's d\", min = 0, max = 3, value = 0.4, step = 0.1),\n      verbatimTextOutput(\"pvaluetxt\")\n    ),\n    mainPanel(\n      plotOutput(\"histogram1\"),\n      plotOutput(\"histogram2\")\n    )\n  )\n)\n\n# Server\nserver &lt;- function(input, output, session) {\n  \n  output$histogram1 &lt;- renderPlot({\n    set.seed(2345)\n    num_samples &lt;- input$n\n    \n    var1 &lt;- rnorm(num_samples, mean = 0, sd = 1)\n    var2 &lt;- rnorm(num_samples, mean = input$d, sd = 1)\n    \n    df &lt;- data.frame(Gruppe1 = var1, Gruppe2 = var2)\n    # Pivoting the dataset from wide to long format\n    df_long &lt;- reshape(\n      data = df,\n      varying = list(names(df)[1:2]),  # Columns to be melted\n      v.names = \"Value\",                      # Name of the variable column in the long format\n      timevar = \"Variable\",                   # Name of the column containing variable names\n      times = c(\"Gruppe 1\", \"Gruppe 2\"),      # New variable names in long format\n      direction = \"long\"                      # Pivoting from wide to long\n    )\n    \n    stripchart(Value ~ Variable, data = df_long,\n               pch = 19, frame = FALSE, \n               vertical = FALSE,\n               method = \"jitter\")\n  })\n  \n  output$pvaluetxt &lt;- renderText({\n    set.seed(2345)\n    num_samples &lt;- input$n\n    \n    var1 &lt;- rnorm(num_samples, mean = 0, sd = 1)\n    var2 &lt;- rnorm(num_samples, mean = input$d, sd = 1)\n    \n    t_test &lt;- t.test(var1, var2)\n    paste(\"p-Wert:\", round(t_test$p.value, digits = 3))\n  })\n}\n\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "R_Shinylive_2.html#r-shinylive-test-1",
    "href": "R_Shinylive_2.html#r-shinylive-test-1",
    "title": "R Shinyliveapp 2",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 900\nui &lt;- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"n\", \"Gruppengröße\", min = 0, max = 100, value = 20),\n      sliderInput(\"d\", \"Cohen's d\", min = 0, max = 3, value = 0.4, step = 0.1),\n      verbatimTextOutput(\"pvaluetxt\")\n    ),\n    mainPanel(\n      plotOutput(\"histogram1\"),\n      plotOutput(\"histogram2\")\n    )\n  )\n)\n\n# Server\nserver &lt;- function(input, output, session) {\n  \n  output$histogram1 &lt;- renderPlot({\n    set.seed(2345)\n    num_samples &lt;- input$n\n    \n    var1 &lt;- rnorm(num_samples, mean = 0, sd = 1)\n    var2 &lt;- rnorm(num_samples, mean = input$d, sd = 1)\n    \n    df &lt;- data.frame(Gruppe1 = var1, Gruppe2 = var2)\n    # Pivoting the dataset from wide to long format\n    df_long &lt;- reshape(\n      data = df,\n      varying = list(names(df)[1:2]),  # Columns to be melted\n      v.names = \"Value\",                      # Name of the variable column in the long format\n      timevar = \"Variable\",                   # Name of the column containing variable names\n      times = c(\"Gruppe 1\", \"Gruppe 2\"),      # New variable names in long format\n      direction = \"long\"                      # Pivoting from wide to long\n    )\n    \n    stripchart(Value ~ Variable, data = df_long,\n               pch = 19, frame = FALSE, \n               vertical = FALSE,\n               method = \"jitter\")\n  })\n  \n  output$pvaluetxt &lt;- renderText({\n    set.seed(2345)\n    num_samples &lt;- input$n\n    \n    var1 &lt;- rnorm(num_samples, mean = 0, sd = 1)\n    var2 &lt;- rnorm(num_samples, mean = input$d, sd = 1)\n    \n    t_test &lt;- t.test(var1, var2)\n    paste(\"p-Wert:\", round(t_test$p.value, digits = 3))\n  })\n}\n\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "today",
    "section": "",
    "text": "Hier teste ich die Ladegschwindigkeit von shinylive-apps und deren caching. Es finden sich auf den folgenden Seiten zwei R-shinyliveapps und zwei Python-shinyliveapps. Sowohl das wiederholte Laden ein und derselben Apps beschleunigt sich durch das Caching der WASM-Bibliotheken als auch das erstmalige Laden der jeweils zweiten App. Insgesamt scheint aber Python Geschwindigkeitsvorteile zu zeigen obwohl für diese Apps numpy, seaborn, matplotlib, scipy`` undshiny`geladen werden, wohingegen die R-apps nurshiny` benötigt."
  },
  {
    "objectID": "index.html#whats-this",
    "href": "index.html#whats-this",
    "title": "today",
    "section": "",
    "text": "Hier teste ich die Ladegschwindigkeit von shinylive-apps und deren caching. Es finden sich auf den folgenden Seiten zwei R-shinyliveapps und zwei Python-shinyliveapps. Sowohl das wiederholte Laden ein und derselben Apps beschleunigt sich durch das Caching der WASM-Bibliotheken als auch das erstmalige Laden der jeweils zweiten App. Insgesamt scheint aber Python Geschwindigkeitsvorteile zu zeigen obwohl für diese Apps numpy, seaborn, matplotlib, scipy`` undshiny`geladen werden, wohingegen die R-apps nurshiny` benötigt."
  },
  {
    "objectID": "Python_Shinylive_2.html",
    "href": "Python_Shinylive_2.html",
    "title": "Python Shinyliveapp 2",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 900\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom scipy.stats import ttest_ind\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_slider(\"n\", \"Gruppengröße\", 0, 100, 20),\n            \n            ui.input_slider(\"d\", \"Cohen's d\", 0, 3, .4, step = .1),\n            ui.output_text_verbatim(\"pvaluetxt\"),\n        ),\n        ui.panel_main(\n            ui.output_plot(\"histogram1\"),\n            ui.output_plot(\"histogram2\"),\n        ),\n    ),\n)\n\n\ndef server(input, output, session):\n  \n    @output\n    @render.plot(alt=\"histogram1\")\n    def histogram1():\n        # Set seed for reproducibility\n        np.random.seed(2345)\n        \n        # Number of samples\n        num_samples = input.n()\n        \n        # Generating normally distributed data\n        var1 = np.random.normal(loc=0, scale=1, size=num_samples)\n        var2 = np.random.normal(loc=input.d(), scale=1, size=num_samples)\n        \n        # Creating a DataFrame\n        data = {'Gruppe 1': var1, 'Gruppe 2': var2}\n        df = pd.DataFrame(data)\n        \n        # Melt the DataFrame to convert it to the long format\n        df_long = df.melt(var_name='Variable', value_name='Value')\n        \n        # Create plot with seaborn\n        sns.stripplot(data=df_long, x=\"Value\", y=\"Variable\")\n        \n        # Remove axis titles and ticks\n        plt.gca().axes.get_xaxis().set_visible(True)\n        plt.gca().axes.get_yaxis().set_visible(True)\n        plt.xlabel('')  # Optional: Set an empty string to remove the x-axis label completely\n        plt.ylabel('')  # Optional: Set an empty string to remove the x-axis label completely\n\n     \n    @output\n    @render.text\n    def pvaluetxt():\n        # Set seed for reproducibility\n        np.random.seed(2345)\n        \n        # Number of samples\n        num_samples = input.n()\n        \n        # Generating normally distributed data\n        var1 = np.random.normal(loc=0, scale=1, size=num_samples)\n        var2 = np.random.normal(loc=input.d(), scale=1, size=num_samples)\n        t_statistic, p_value = ttest_ind(var1, var2)\n        return f\"p-Wert: {round(p_value, 3)}\"\n\n\napp = App(app_ui, server, debug=True)"
  },
  {
    "objectID": "Python_Shinylive_2.html#shinylive-python-test",
    "href": "Python_Shinylive_2.html#shinylive-python-test",
    "title": "Python Shinyliveapp 2",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 900\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom scipy.stats import ttest_ind\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_slider(\"n\", \"Gruppengröße\", 0, 100, 20),\n            \n            ui.input_slider(\"d\", \"Cohen's d\", 0, 3, .4, step = .1),\n            ui.output_text_verbatim(\"pvaluetxt\"),\n        ),\n        ui.panel_main(\n            ui.output_plot(\"histogram1\"),\n            ui.output_plot(\"histogram2\"),\n        ),\n    ),\n)\n\n\ndef server(input, output, session):\n  \n    @output\n    @render.plot(alt=\"histogram1\")\n    def histogram1():\n        # Set seed for reproducibility\n        np.random.seed(2345)\n        \n        # Number of samples\n        num_samples = input.n()\n        \n        # Generating normally distributed data\n        var1 = np.random.normal(loc=0, scale=1, size=num_samples)\n        var2 = np.random.normal(loc=input.d(), scale=1, size=num_samples)\n        \n        # Creating a DataFrame\n        data = {'Gruppe 1': var1, 'Gruppe 2': var2}\n        df = pd.DataFrame(data)\n        \n        # Melt the DataFrame to convert it to the long format\n        df_long = df.melt(var_name='Variable', value_name='Value')\n        \n        # Create plot with seaborn\n        sns.stripplot(data=df_long, x=\"Value\", y=\"Variable\")\n        \n        # Remove axis titles and ticks\n        plt.gca().axes.get_xaxis().set_visible(True)\n        plt.gca().axes.get_yaxis().set_visible(True)\n        plt.xlabel('')  # Optional: Set an empty string to remove the x-axis label completely\n        plt.ylabel('')  # Optional: Set an empty string to remove the x-axis label completely\n\n     \n    @output\n    @render.text\n    def pvaluetxt():\n        # Set seed for reproducibility\n        np.random.seed(2345)\n        \n        # Number of samples\n        num_samples = input.n()\n        \n        # Generating normally distributed data\n        var1 = np.random.normal(loc=0, scale=1, size=num_samples)\n        var2 = np.random.normal(loc=input.d(), scale=1, size=num_samples)\n        t_statistic, p_value = ttest_ind(var1, var2)\n        return f\"p-Wert: {round(p_value, 3)}\"\n\n\napp = App(app_ui, server, debug=True)"
  },
  {
    "objectID": "Python_Shinylive_1.html",
    "href": "Python_Shinylive_1.html",
    "title": "Python Shinyliveapp 1",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 900\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom scipy.stats import ttest_ind\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_slider(\"n\", \"Gruppengröße\", 0, 100, 20),\n            \n            ui.input_slider(\"d\", \"Cohen's d\", 0, 3, .4, step = .1),\n            ui.output_text_verbatim(\"pvaluetxt\"),\n        ),\n        ui.panel_main(\n            ui.output_plot(\"histogram1\"),\n            ui.output_plot(\"histogram2\"),\n        ),\n    ),\n)\n\n\ndef server(input, output, session):\n  \n    @output\n    @render.plot(alt=\"histogram1\")\n    def histogram1():\n        # Set seed for reproducibility\n        np.random.seed(2345)\n        \n        # Number of samples\n        num_samples = input.n()\n        \n        # Generating normally distributed data\n        var1 = np.random.normal(loc=0, scale=1, size=num_samples)\n        var2 = np.random.normal(loc=input.d(), scale=1, size=num_samples)\n        \n        # Creating a DataFrame\n        data = {'Gruppe 1': var1, 'Gruppe 2': var2}\n        df = pd.DataFrame(data)\n        \n        # Melt the DataFrame to convert it to the long format\n        df_long = df.melt(var_name='Variable', value_name='Value')\n        \n        # Create plot with seaborn\n        sns.stripplot(data=df_long, x=\"Value\", y=\"Variable\")\n        \n        # Remove axis titles and ticks\n        plt.gca().axes.get_xaxis().set_visible(True)\n        plt.gca().axes.get_yaxis().set_visible(True)\n        plt.xlabel('')  # Optional: Set an empty string to remove the x-axis label completely\n        plt.ylabel('')  # Optional: Set an empty string to remove the x-axis label completely\n\n     \n    @output\n    @render.text\n    def pvaluetxt():\n        # Set seed for reproducibility\n        np.random.seed(2345)\n        \n        # Number of samples\n        num_samples = input.n()\n        \n        # Generating normally distributed data\n        var1 = np.random.normal(loc=0, scale=1, size=num_samples)\n        var2 = np.random.normal(loc=input.d(), scale=1, size=num_samples)\n        t_statistic, p_value = ttest_ind(var1, var2)\n        return f\"p-Wert: {round(p_value, 3)}\"\n\n\napp = App(app_ui, server, debug=True)"
  },
  {
    "objectID": "Python_Shinylive_1.html#shinylive-python-test",
    "href": "Python_Shinylive_1.html#shinylive-python-test",
    "title": "Python Shinyliveapp 1",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 900\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom scipy.stats import ttest_ind\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_slider(\"n\", \"Gruppengröße\", 0, 100, 20),\n            \n            ui.input_slider(\"d\", \"Cohen's d\", 0, 3, .4, step = .1),\n            ui.output_text_verbatim(\"pvaluetxt\"),\n        ),\n        ui.panel_main(\n            ui.output_plot(\"histogram1\"),\n            ui.output_plot(\"histogram2\"),\n        ),\n    ),\n)\n\n\ndef server(input, output, session):\n  \n    @output\n    @render.plot(alt=\"histogram1\")\n    def histogram1():\n        # Set seed for reproducibility\n        np.random.seed(2345)\n        \n        # Number of samples\n        num_samples = input.n()\n        \n        # Generating normally distributed data\n        var1 = np.random.normal(loc=0, scale=1, size=num_samples)\n        var2 = np.random.normal(loc=input.d(), scale=1, size=num_samples)\n        \n        # Creating a DataFrame\n        data = {'Gruppe 1': var1, 'Gruppe 2': var2}\n        df = pd.DataFrame(data)\n        \n        # Melt the DataFrame to convert it to the long format\n        df_long = df.melt(var_name='Variable', value_name='Value')\n        \n        # Create plot with seaborn\n        sns.stripplot(data=df_long, x=\"Value\", y=\"Variable\")\n        \n        # Remove axis titles and ticks\n        plt.gca().axes.get_xaxis().set_visible(True)\n        plt.gca().axes.get_yaxis().set_visible(True)\n        plt.xlabel('')  # Optional: Set an empty string to remove the x-axis label completely\n        plt.ylabel('')  # Optional: Set an empty string to remove the x-axis label completely\n\n     \n    @output\n    @render.text\n    def pvaluetxt():\n        # Set seed for reproducibility\n        np.random.seed(2345)\n        \n        # Number of samples\n        num_samples = input.n()\n        \n        # Generating normally distributed data\n        var1 = np.random.normal(loc=0, scale=1, size=num_samples)\n        var2 = np.random.normal(loc=input.d(), scale=1, size=num_samples)\n        t_statistic, p_value = ttest_ind(var1, var2)\n        return f\"p-Wert: {round(p_value, 3)}\"\n\n\napp = App(app_ui, server, debug=True)"
  },
  {
    "objectID": "R_Shinylive_1.html",
    "href": "R_Shinylive_1.html",
    "title": "R Shinyliveapp 1",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 900\nui &lt;- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"n\", \"Gruppengröße\", min = 0, max = 100, value = 20),\n      sliderInput(\"d\", \"Cohen's d\", min = 0, max = 3, value = 0.4, step = 0.1),\n      verbatimTextOutput(\"pvaluetxt\")\n    ),\n    mainPanel(\n      plotOutput(\"histogram1\"),\n      plotOutput(\"histogram2\")\n    )\n  )\n)\n\n# Server\nserver &lt;- function(input, output, session) {\n  \n  output$histogram1 &lt;- renderPlot({\n    set.seed(2345)\n    num_samples &lt;- input$n\n    \n    var1 &lt;- rnorm(num_samples, mean = 0, sd = 1)\n    var2 &lt;- rnorm(num_samples, mean = input$d, sd = 1)\n    \n    df &lt;- data.frame(Gruppe1 = var1, Gruppe2 = var2)\n    # Pivoting the dataset from wide to long format\n    df_long &lt;- reshape(\n      data = df,\n      varying = list(names(df)[1:2]),  # Columns to be melted\n      v.names = \"Value\",                      # Name of the variable column in the long format\n      timevar = \"Variable\",                   # Name of the column containing variable names\n      times = c(\"Gruppe 1\", \"Gruppe 2\"),      # New variable names in long format\n      direction = \"long\"                      # Pivoting from wide to long\n    )\n    \n    stripchart(Value ~ Variable, data = df_long,\n               pch = 19, frame = FALSE, \n               vertical = FALSE,\n               method = \"jitter\")\n  })\n  \n  output$pvaluetxt &lt;- renderText({\n    set.seed(2345)\n    num_samples &lt;- input$n\n    \n    var1 &lt;- rnorm(num_samples, mean = 0, sd = 1)\n    var2 &lt;- rnorm(num_samples, mean = input$d, sd = 1)\n    \n    t_test &lt;- t.test(var1, var2)\n    paste(\"p-Wert:\", round(t_test$p.value, digits = 3))\n  })\n}\n\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "R_Shinylive_1.html#r-shinylive-test-1",
    "href": "R_Shinylive_1.html#r-shinylive-test-1",
    "title": "R Shinyliveapp 1",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 900\nui &lt;- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"n\", \"Gruppengröße\", min = 0, max = 100, value = 20),\n      sliderInput(\"d\", \"Cohen's d\", min = 0, max = 3, value = 0.4, step = 0.1),\n      verbatimTextOutput(\"pvaluetxt\")\n    ),\n    mainPanel(\n      plotOutput(\"histogram1\"),\n      plotOutput(\"histogram2\")\n    )\n  )\n)\n\n# Server\nserver &lt;- function(input, output, session) {\n  \n  output$histogram1 &lt;- renderPlot({\n    set.seed(2345)\n    num_samples &lt;- input$n\n    \n    var1 &lt;- rnorm(num_samples, mean = 0, sd = 1)\n    var2 &lt;- rnorm(num_samples, mean = input$d, sd = 1)\n    \n    df &lt;- data.frame(Gruppe1 = var1, Gruppe2 = var2)\n    # Pivoting the dataset from wide to long format\n    df_long &lt;- reshape(\n      data = df,\n      varying = list(names(df)[1:2]),  # Columns to be melted\n      v.names = \"Value\",                      # Name of the variable column in the long format\n      timevar = \"Variable\",                   # Name of the column containing variable names\n      times = c(\"Gruppe 1\", \"Gruppe 2\"),      # New variable names in long format\n      direction = \"long\"                      # Pivoting from wide to long\n    )\n    \n    stripchart(Value ~ Variable, data = df_long,\n               pch = 19, frame = FALSE, \n               vertical = FALSE,\n               method = \"jitter\")\n  })\n  \n  output$pvaluetxt &lt;- renderText({\n    set.seed(2345)\n    num_samples &lt;- input$n\n    \n    var1 &lt;- rnorm(num_samples, mean = 0, sd = 1)\n    var2 &lt;- rnorm(num_samples, mean = input$d, sd = 1)\n    \n    t_test &lt;- t.test(var1, var2)\n    paste(\"p-Wert:\", round(t_test$p.value, digits = 3))\n  })\n}\n\nshinyApp(ui = ui, server = server)"
  }
]