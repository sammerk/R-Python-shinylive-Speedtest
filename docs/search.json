[
  {
    "objectID": "R_Shinylive_2.html",
    "href": "R_Shinylive_2.html",
    "title": "R Shinyliveapp 2",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 900\nui &lt;- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"n\", \"Gruppengröße\", min = 0, max = 100, value = 20),\n      sliderInput(\"d\", \"Cohen's d\", min = 0, max = 3, value = 0.4, step = 0.1),\n      verbatimTextOutput(\"pvaluetxt\")\n    ),\n    mainPanel(\n      plotOutput(\"histogram1\"),\n      plotOutput(\"histogram2\")\n    )\n  )\n)\n\n# Server\nserver &lt;- function(input, output, session) {\n  \n  output$histogram1 &lt;- renderPlot({\n    set.seed(2345)\n    num_samples &lt;- input$n\n    \n    var1 &lt;- rnorm(num_samples, mean = 0, sd = 1)\n    var2 &lt;- rnorm(num_samples, mean = input$d, sd = 1)\n    \n    df &lt;- data.frame(Gruppe1 = var1, Gruppe2 = var2)\n    # Pivoting the dataset from wide to long format\n    df_long &lt;- reshape(\n      data = df,\n      varying = list(names(df)[1:2]),  # Columns to be melted\n      v.names = \"Value\",                      # Name of the variable column in the long format\n      timevar = \"Variable\",                   # Name of the column containing variable names\n      times = c(\"Gruppe 1\", \"Gruppe 2\"),      # New variable names in long format\n      direction = \"long\"                      # Pivoting from wide to long\n    )\n    \n    stripchart(Value ~ Variable, data = df_long,\n               pch = 19, frame = FALSE, \n               vertical = FALSE,\n               method = \"jitter\")\n  })\n  \n  output$pvaluetxt &lt;- renderText({\n    set.seed(2345)\n    num_samples &lt;- input$n\n    \n    var1 &lt;- rnorm(num_samples, mean = 0, sd = 1)\n    var2 &lt;- rnorm(num_samples, mean = input$d, sd = 1)\n    \n    t_test &lt;- t.test(var1, var2)\n    paste(\"p-Wert:\", round(t_test$p.value, digits = 3))\n  })\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "R base",
      "R Shinyliveapp 2"
    ]
  },
  {
    "objectID": "R_Shinylive_2.html#r-shinylive-test-1",
    "href": "R_Shinylive_2.html#r-shinylive-test-1",
    "title": "R Shinyliveapp 2",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 900\nui &lt;- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"n\", \"Gruppengröße\", min = 0, max = 100, value = 20),\n      sliderInput(\"d\", \"Cohen's d\", min = 0, max = 3, value = 0.4, step = 0.1),\n      verbatimTextOutput(\"pvaluetxt\")\n    ),\n    mainPanel(\n      plotOutput(\"histogram1\"),\n      plotOutput(\"histogram2\")\n    )\n  )\n)\n\n# Server\nserver &lt;- function(input, output, session) {\n  \n  output$histogram1 &lt;- renderPlot({\n    set.seed(2345)\n    num_samples &lt;- input$n\n    \n    var1 &lt;- rnorm(num_samples, mean = 0, sd = 1)\n    var2 &lt;- rnorm(num_samples, mean = input$d, sd = 1)\n    \n    df &lt;- data.frame(Gruppe1 = var1, Gruppe2 = var2)\n    # Pivoting the dataset from wide to long format\n    df_long &lt;- reshape(\n      data = df,\n      varying = list(names(df)[1:2]),  # Columns to be melted\n      v.names = \"Value\",                      # Name of the variable column in the long format\n      timevar = \"Variable\",                   # Name of the column containing variable names\n      times = c(\"Gruppe 1\", \"Gruppe 2\"),      # New variable names in long format\n      direction = \"long\"                      # Pivoting from wide to long\n    )\n    \n    stripchart(Value ~ Variable, data = df_long,\n               pch = 19, frame = FALSE, \n               vertical = FALSE,\n               method = \"jitter\")\n  })\n  \n  output$pvaluetxt &lt;- renderText({\n    set.seed(2345)\n    num_samples &lt;- input$n\n    \n    var1 &lt;- rnorm(num_samples, mean = 0, sd = 1)\n    var2 &lt;- rnorm(num_samples, mean = input$d, sd = 1)\n    \n    t_test &lt;- t.test(var1, var2)\n    paste(\"p-Wert:\", round(t_test$p.value, digits = 3))\n  })\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "R base",
      "R Shinyliveapp 2"
    ]
  },
  {
    "objectID": "R_Shinylive_1.html",
    "href": "R_Shinylive_1.html",
    "title": "R Shinyliveapp 1",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 900\nui &lt;- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"n\", \"Gruppengröße\", min = 0, max = 100, value = 20),\n      sliderInput(\"d\", \"Cohen's d\", min = 0, max = 3, value = 0.4, step = 0.1),\n      verbatimTextOutput(\"pvaluetxt\")\n    ),\n    mainPanel(\n      plotOutput(\"histogram1\"),\n      plotOutput(\"histogram2\")\n    )\n  )\n)\n\n# Server\nserver &lt;- function(input, output, session) {\n  \n  output$histogram1 &lt;- renderPlot({\n    set.seed(2345)\n    num_samples &lt;- input$n\n    \n    var1 &lt;- rnorm(num_samples, mean = 0, sd = 1)\n    var2 &lt;- rnorm(num_samples, mean = input$d, sd = 1)\n    \n    df &lt;- data.frame(Gruppe1 = var1, Gruppe2 = var2)\n    # Pivoting the dataset from wide to long format\n    df_long &lt;- reshape(\n      data = df,\n      varying = list(names(df)[1:2]),  # Columns to be melted\n      v.names = \"Value\",                      # Name of the variable column in the long format\n      timevar = \"Variable\",                   # Name of the column containing variable names\n      times = c(\"Gruppe 1\", \"Gruppe 2\"),      # New variable names in long format\n      direction = \"long\"                      # Pivoting from wide to long\n    )\n    \n    stripchart(Value ~ Variable, data = df_long,\n               pch = 19, frame = FALSE, \n               vertical = FALSE,\n               method = \"jitter\")\n  })\n  \n  output$pvaluetxt &lt;- renderText({\n    set.seed(2345)\n    num_samples &lt;- input$n\n    \n    var1 &lt;- rnorm(num_samples, mean = 0, sd = 1)\n    var2 &lt;- rnorm(num_samples, mean = input$d, sd = 1)\n    \n    t_test &lt;- t.test(var1, var2)\n    paste(\"p-Wert:\", round(t_test$p.value, digits = 3))\n  })\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "R base",
      "R Shinyliveapp 1"
    ]
  },
  {
    "objectID": "R_Shinylive_1.html#r-shinylive-test-1",
    "href": "R_Shinylive_1.html#r-shinylive-test-1",
    "title": "R Shinyliveapp 1",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 900\nui &lt;- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"n\", \"Gruppengröße\", min = 0, max = 100, value = 20),\n      sliderInput(\"d\", \"Cohen's d\", min = 0, max = 3, value = 0.4, step = 0.1),\n      verbatimTextOutput(\"pvaluetxt\")\n    ),\n    mainPanel(\n      plotOutput(\"histogram1\"),\n      plotOutput(\"histogram2\")\n    )\n  )\n)\n\n# Server\nserver &lt;- function(input, output, session) {\n  \n  output$histogram1 &lt;- renderPlot({\n    set.seed(2345)\n    num_samples &lt;- input$n\n    \n    var1 &lt;- rnorm(num_samples, mean = 0, sd = 1)\n    var2 &lt;- rnorm(num_samples, mean = input$d, sd = 1)\n    \n    df &lt;- data.frame(Gruppe1 = var1, Gruppe2 = var2)\n    # Pivoting the dataset from wide to long format\n    df_long &lt;- reshape(\n      data = df,\n      varying = list(names(df)[1:2]),  # Columns to be melted\n      v.names = \"Value\",                      # Name of the variable column in the long format\n      timevar = \"Variable\",                   # Name of the column containing variable names\n      times = c(\"Gruppe 1\", \"Gruppe 2\"),      # New variable names in long format\n      direction = \"long\"                      # Pivoting from wide to long\n    )\n    \n    stripchart(Value ~ Variable, data = df_long,\n               pch = 19, frame = FALSE, \n               vertical = FALSE,\n               method = \"jitter\")\n  })\n  \n  output$pvaluetxt &lt;- renderText({\n    set.seed(2345)\n    num_samples &lt;- input$n\n    \n    var1 &lt;- rnorm(num_samples, mean = 0, sd = 1)\n    var2 &lt;- rnorm(num_samples, mean = input$d, sd = 1)\n    \n    t_test &lt;- t.test(var1, var2)\n    paste(\"p-Wert:\", round(t_test$p.value, digits = 3))\n  })\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "R base",
      "R Shinyliveapp 1"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Load Time Test",
    "section": "",
    "text": "Hier teste ich die Ladegschwindigkeit von shinylive-apps und deren caching. Es finden sich auf den folgenden Seiten zwei R-shinyliveapps und zwei Python-shinyliveapps. Sowohl das wiederholte Laden ein und derselben Apps beschleunigt sich durch das Caching der WASM-Bibliotheken als auch das erstmalige Laden der jeweils zweiten App. Insgesamt scheint aber Python Geschwindigkeitsvorteile zu zeigen obwohl für diese Apps numpy, seaborn, matplotlib, scipy`` undshiny`geladen werden, wohingegen die R-apps nurshiny` benötigt."
  },
  {
    "objectID": "index.html#whats-this",
    "href": "index.html#whats-this",
    "title": "Load Time Test",
    "section": "",
    "text": "Hier teste ich die Ladegschwindigkeit von shinylive-apps und deren caching. Es finden sich auf den folgenden Seiten zwei R-shinyliveapps und zwei Python-shinyliveapps. Sowohl das wiederholte Laden ein und derselben Apps beschleunigt sich durch das Caching der WASM-Bibliotheken als auch das erstmalige Laden der jeweils zweiten App. Insgesamt scheint aber Python Geschwindigkeitsvorteile zu zeigen obwohl für diese Apps numpy, seaborn, matplotlib, scipy`` undshiny`geladen werden, wohingegen die R-apps nurshiny` benötigt."
  },
  {
    "objectID": "Python_Shinylive_2.html",
    "href": "Python_Shinylive_2.html",
    "title": "Python Shinyliveapp 2",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 900\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom scipy.stats import ttest_ind\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_slider(\"n\", \"Gruppengröße\", 0, 100, 20),\n            \n            ui.input_slider(\"d\", \"Cohen's d\", 0, 3, .4, step = .1),\n            ui.output_text_verbatim(\"pvaluetxt\"),\n        ),\n        ui.panel_main(\n            ui.output_plot(\"histogram1\"),\n            ui.output_plot(\"histogram2\"),\n        ),\n    ),\n)\n\n\ndef server(input, output, session):\n  \n    @output\n    @render.plot(alt=\"histogram1\")\n    def histogram1():\n        # Set seed for reproducibility\n        np.random.seed(2345)\n        \n        # Number of samples\n        num_samples = input.n()\n        \n        # Generating normally distributed data\n        var1 = np.random.normal(loc=0, scale=1, size=num_samples)\n        var2 = np.random.normal(loc=input.d(), scale=1, size=num_samples)\n        \n        # Creating a DataFrame\n        data = {'Gruppe 1': var1, 'Gruppe 2': var2}\n        df = pd.DataFrame(data)\n        \n        # Melt the DataFrame to convert it to the long format\n        df_long = df.melt(var_name='Variable', value_name='Value')\n        \n        # Create plot with seaborn\n        sns.stripplot(data=df_long, x=\"Value\", y=\"Variable\")\n        \n        # Remove axis titles and ticks\n        plt.gca().axes.get_xaxis().set_visible(True)\n        plt.gca().axes.get_yaxis().set_visible(True)\n        plt.xlabel('')  # Optional: Set an empty string to remove the x-axis label completely\n        plt.ylabel('')  # Optional: Set an empty string to remove the x-axis label completely\n\n     \n    @output\n    @render.text\n    def pvaluetxt():\n        # Set seed for reproducibility\n        np.random.seed(2345)\n        \n        # Number of samples\n        num_samples = input.n()\n        \n        # Generating normally distributed data\n        var1 = np.random.normal(loc=0, scale=1, size=num_samples)\n        var2 = np.random.normal(loc=input.d(), scale=1, size=num_samples)\n        t_statistic, p_value = ttest_ind(var1, var2)\n        return f\"p-Wert: {round(p_value, 3)}\"\n\n\napp = App(app_ui, server, debug=True)",
    "crumbs": [
      "Python",
      "Python Shinyliveapp 2"
    ]
  },
  {
    "objectID": "Python_Shinylive_2.html#shinylive-python-test",
    "href": "Python_Shinylive_2.html#shinylive-python-test",
    "title": "Python Shinyliveapp 2",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 900\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom scipy.stats import ttest_ind\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_slider(\"n\", \"Gruppengröße\", 0, 100, 20),\n            \n            ui.input_slider(\"d\", \"Cohen's d\", 0, 3, .4, step = .1),\n            ui.output_text_verbatim(\"pvaluetxt\"),\n        ),\n        ui.panel_main(\n            ui.output_plot(\"histogram1\"),\n            ui.output_plot(\"histogram2\"),\n        ),\n    ),\n)\n\n\ndef server(input, output, session):\n  \n    @output\n    @render.plot(alt=\"histogram1\")\n    def histogram1():\n        # Set seed for reproducibility\n        np.random.seed(2345)\n        \n        # Number of samples\n        num_samples = input.n()\n        \n        # Generating normally distributed data\n        var1 = np.random.normal(loc=0, scale=1, size=num_samples)\n        var2 = np.random.normal(loc=input.d(), scale=1, size=num_samples)\n        \n        # Creating a DataFrame\n        data = {'Gruppe 1': var1, 'Gruppe 2': var2}\n        df = pd.DataFrame(data)\n        \n        # Melt the DataFrame to convert it to the long format\n        df_long = df.melt(var_name='Variable', value_name='Value')\n        \n        # Create plot with seaborn\n        sns.stripplot(data=df_long, x=\"Value\", y=\"Variable\")\n        \n        # Remove axis titles and ticks\n        plt.gca().axes.get_xaxis().set_visible(True)\n        plt.gca().axes.get_yaxis().set_visible(True)\n        plt.xlabel('')  # Optional: Set an empty string to remove the x-axis label completely\n        plt.ylabel('')  # Optional: Set an empty string to remove the x-axis label completely\n\n     \n    @output\n    @render.text\n    def pvaluetxt():\n        # Set seed for reproducibility\n        np.random.seed(2345)\n        \n        # Number of samples\n        num_samples = input.n()\n        \n        # Generating normally distributed data\n        var1 = np.random.normal(loc=0, scale=1, size=num_samples)\n        var2 = np.random.normal(loc=input.d(), scale=1, size=num_samples)\n        t_statistic, p_value = ttest_ind(var1, var2)\n        return f\"p-Wert: {round(p_value, 3)}\"\n\n\napp = App(app_ui, server, debug=True)",
    "crumbs": [
      "Python",
      "Python Shinyliveapp 2"
    ]
  },
  {
    "objectID": "Python_Shinylive_1.html",
    "href": "Python_Shinylive_1.html",
    "title": "Python Shinyliveapp 1",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 900\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom scipy.stats import ttest_ind\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_slider(\"n\", \"Gruppengröße\", 0, 100, 20),\n            \n            ui.input_slider(\"d\", \"Cohen's d\", 0, 3, .4, step = .1),\n            ui.output_text_verbatim(\"pvaluetxt\"),\n        ),\n        ui.panel_main(\n            ui.output_plot(\"histogram1\"),\n            ui.output_plot(\"histogram2\"),\n        ),\n    ),\n)\n\n\ndef server(input, output, session):\n  \n    @output\n    @render.plot(alt=\"histogram1\")\n    def histogram1():\n        # Set seed for reproducibility\n        np.random.seed(2345)\n        \n        # Number of samples\n        num_samples = input.n()\n        \n        # Generating normally distributed data\n        var1 = np.random.normal(loc=0, scale=1, size=num_samples)\n        var2 = np.random.normal(loc=input.d(), scale=1, size=num_samples)\n        \n        # Creating a DataFrame\n        data = {'Gruppe 1': var1, 'Gruppe 2': var2}\n        df = pd.DataFrame(data)\n        \n        # Melt the DataFrame to convert it to the long format\n        df_long = df.melt(var_name='Variable', value_name='Value')\n        \n        # Create plot with seaborn\n        sns.stripplot(data=df_long, x=\"Value\", y=\"Variable\")\n        \n        # Remove axis titles and ticks\n        plt.gca().axes.get_xaxis().set_visible(True)\n        plt.gca().axes.get_yaxis().set_visible(True)\n        plt.xlabel('')  # Optional: Set an empty string to remove the x-axis label completely\n        plt.ylabel('')  # Optional: Set an empty string to remove the x-axis label completely\n\n     \n    @output\n    @render.text\n    def pvaluetxt():\n        # Set seed for reproducibility\n        np.random.seed(2345)\n        \n        # Number of samples\n        num_samples = input.n()\n        \n        # Generating normally distributed data\n        var1 = np.random.normal(loc=0, scale=1, size=num_samples)\n        var2 = np.random.normal(loc=input.d(), scale=1, size=num_samples)\n        t_statistic, p_value = ttest_ind(var1, var2)\n        return f\"p-Wert: {round(p_value, 3)}\"\n\n\napp = App(app_ui, server, debug=True)",
    "crumbs": [
      "Python",
      "Python Shinyliveapp 1"
    ]
  },
  {
    "objectID": "Python_Shinylive_1.html#shinylive-python-test",
    "href": "Python_Shinylive_1.html#shinylive-python-test",
    "title": "Python Shinyliveapp 1",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 900\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom scipy.stats import ttest_ind\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_slider(\"n\", \"Gruppengröße\", 0, 100, 20),\n            \n            ui.input_slider(\"d\", \"Cohen's d\", 0, 3, .4, step = .1),\n            ui.output_text_verbatim(\"pvaluetxt\"),\n        ),\n        ui.panel_main(\n            ui.output_plot(\"histogram1\"),\n            ui.output_plot(\"histogram2\"),\n        ),\n    ),\n)\n\n\ndef server(input, output, session):\n  \n    @output\n    @render.plot(alt=\"histogram1\")\n    def histogram1():\n        # Set seed for reproducibility\n        np.random.seed(2345)\n        \n        # Number of samples\n        num_samples = input.n()\n        \n        # Generating normally distributed data\n        var1 = np.random.normal(loc=0, scale=1, size=num_samples)\n        var2 = np.random.normal(loc=input.d(), scale=1, size=num_samples)\n        \n        # Creating a DataFrame\n        data = {'Gruppe 1': var1, 'Gruppe 2': var2}\n        df = pd.DataFrame(data)\n        \n        # Melt the DataFrame to convert it to the long format\n        df_long = df.melt(var_name='Variable', value_name='Value')\n        \n        # Create plot with seaborn\n        sns.stripplot(data=df_long, x=\"Value\", y=\"Variable\")\n        \n        # Remove axis titles and ticks\n        plt.gca().axes.get_xaxis().set_visible(True)\n        plt.gca().axes.get_yaxis().set_visible(True)\n        plt.xlabel('')  # Optional: Set an empty string to remove the x-axis label completely\n        plt.ylabel('')  # Optional: Set an empty string to remove the x-axis label completely\n\n     \n    @output\n    @render.text\n    def pvaluetxt():\n        # Set seed for reproducibility\n        np.random.seed(2345)\n        \n        # Number of samples\n        num_samples = input.n()\n        \n        # Generating normally distributed data\n        var1 = np.random.normal(loc=0, scale=1, size=num_samples)\n        var2 = np.random.normal(loc=input.d(), scale=1, size=num_samples)\n        t_statistic, p_value = ttest_ind(var1, var2)\n        return f\"p-Wert: {round(p_value, 3)}\"\n\n\napp = App(app_ui, server, debug=True)",
    "crumbs": [
      "Python",
      "Python Shinyliveapp 1"
    ]
  },
  {
    "objectID": "R_lib_Shinylive_2.html",
    "href": "R_lib_Shinylive_2.html",
    "title": "R with libs 2",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 900\n## Task Name: Korrelogramme_deskriptiv_lesen ####################################################\n\nlibrary(shiny)\nlibrary(miniUI)\nlibrary(shinyjs)\nlibrary(dplyr)\nlibrary(learnr)\nlibrary(shinycssloaders)\nlibrary(bayestestR)\n\nset.seed(25051982)\n\n\n## UI #########################################################################\nui &lt;- miniPage(\n  useShinyjs(),\n  miniContentPanel(\n    wellPanel(\n      h4(\"Korrelogramme interpretieren\"),\n      htmlOutput(\"prompt_task\"),\n      plotOutput(\"plot\", height = \"400px\", width = \"400px\")\n      ),\n    shinyjs::hidden(wellPanel(id = \"feedbackpanel_task\",\n                              withSpinner(\n                              htmlOutput(\"feedback_task\"),\n                              proxy.height = \"50px\",\n                              color = \"#8cd000\"))\n                    ),\n    wellPanel(\n      uiOutput(\"ui_answers_task\"),\n      actionButton(\"show_feedback_task\", \n                   \"Prüfe meine Lösung!\",\n                   icon = icon(\"send\")),\n      actionButton(\"reshuffle_task\", \n                   \"Diese Aufgabe wiederholen\",\n                   icon = icon(\"repeat\")),\n      actionButton(\"new_task\", \n                   \"Neue Aufgabe derselben Art\",\n                   icon = icon(\"plus\"))\n    )      \n  )  \n)\n\n\n\nserver &lt;- function(input, output, session) {\n  \n  \n  # Global functions ###########################################################\n  ## round2 rounds .5 upwards\n  round2 = function(x, n) {\n    posneg = sign(x)\n    z = abs(x)*10^n\n    z = z + 0.5 + sqrt(.Machine$double.eps)\n    z = trunc(z)\n    z = z/10^n\n    z*posneg\n  }\n  \n  \n  ##############################################################################\n  # Backend for task  ##########################################################\n  ##############################################################################\n  \n  ## Matrix with variables and values\n  shape &lt;- reactive({\n    input$new_task\n    \n    sample(c(\"unif\", \"skew1\", \n             \"skew2\", \"normal\",\"u\"))\n    })\n  \n  data &lt;- reactive({\n    input$new_task\n    \n    data &lt;- \n      tibble(u = sample(distribution_beta(100, .6, .6), 100),\n             unif = sample(distribution_beta(100, 1, 1), 100),\n             normal = sample(distribution_beta(100, 4, 4), 100),\n             skew1 = sample(distribution_beta(100, 1, 8), 100),\n             skew2 = sample(distribution_beta(100, 8, 1), 100)\n      ) %&gt;% \n      select(as.character(shape()))\n    \n    names(data) &lt;- \"A\"\n    \n    data$B &lt;- (data$A + rnorm(100, 0, sample(c(.15, 60), 1)))*sample(c(1,-1),1)\n    \n    return(data)\n  })\n  \n  output$plot &lt;- renderPlot({\n    \n    ggplot(data(), aes(A, B)) + \n      geom_point(color = \"#8CD000\") +\n      stat_smooth(se = F, method = \"lm\", color = \"#8CD000\") +\n      geom_rug(color = \"#8CD000\", alpha = .5) + \n      theme_minimal() + \n      ggtitle(\"Streudiagramm\") +\n      labs(caption = \"Die x- und y-Koordinaten jedes Punktes sind\\nauf den jeweiligen Achsen als Striche dargestellt\")\n    \n  })\n  \n  \n  \n  questions_answers &lt;- reactive({\n    input$reshuffle_task\n    input$new_task\n    tibble(\n      questions = c(\"A ist linksschief verteilt\",\n                    \"A ist rechtsschief verteilt\",\n                    \"A und B sind stark positiv korreliert\",\n                    \"A und B sind stark negativ korreliert\"),\n      answers = c(DescTools::Skew(data()$A) &lt; -1,\n                  DescTools::Skew(data()$A) &gt; 1,\n                  cor(data()$A, data()$B) &gt; .4,\n                  cor(data()$A, data()$B) &lt; -.4)\n      )%&gt;% \n      sample_frac(1)\n  })\n  \n\n  ## Render UI for Answers ###\n  output$ui_answers_task &lt;- renderUI({\n    input$reshuffle_task\n    input$new_task\n    checkboxGroupInput(\"answers_task\",\n                       \"Bitte zutreffendes ankreuzen\",\n                       questions_answers()$questions\n                       )\n  })\n  \n  ## Prompt task \n  output$prompt_task &lt;- renderText({\n    paste(\"Welche Aussagen bzgl. der graphisch dargestellten Daten sind wahr?\")\n  }) \n\n  \n  ## Correct answers ###\n  correct_answers_task &lt;- reactive({\n    questions_answers() %&gt;% \n      filter(answers == T) %&gt;% \n      pull(questions)\n  })\n  \n\n  ## Feedback task  ####\n  output$feedback_task &lt;- renderText({   \n    \n      if(setequal(correct_answers_task(), input$answers_task)){\n        HTML(paste(\"Richtig! &lt;br&gt;&lt;i&gt;\", \n                   learnr::random_praise(),\n                   \"&lt;i&gt;\"))}else{\n          HTML(paste(\"&lt;b&gt;Leider nicht korrekt!&lt;/b&gt; Richtig wäre:  &lt;br&gt;✓ \", \n                     paste(correct_answers_task(), collapse = \", &lt;br&gt;✓ \"),\n                     \"&lt;br&gt;&lt;i&gt;\",\n                     learnr::random_encouragement(),\n                     \"&lt;/i&gt;\"))\n        } \n  })\n  \n  ## Show feedback on button click \n  observeEvent(input$show_feedback_task, {\n    showElement(id = \"feedbackpanel_task\")\n  })\n  \n  ## Hide feedback on solution change or new plot type\n  observeEvent(c(input$answers_task, input$new_task), {\n    hideElement(id = \"feedbackpanel_task\")\n  })\n  \n  ## Reset answer on new plot type\n  observeEvent(c(input$reshuffle_task, input$new_task), {\n    reset(id = \"answers_task\")\n  })\n  \n  \n  \n}\n\n# Create Shiny object\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "R libs",
      "R with libs 2"
    ]
  },
  {
    "objectID": "R_lib_Shinylive_2.html#r-shinylive-test-1",
    "href": "R_lib_Shinylive_2.html#r-shinylive-test-1",
    "title": "R with libs 2",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 900\n## Task Name: Korrelogramme_deskriptiv_lesen ####################################################\n\nlibrary(shiny)\nlibrary(miniUI)\nlibrary(shinyjs)\nlibrary(dplyr)\nlibrary(learnr)\nlibrary(shinycssloaders)\nlibrary(bayestestR)\n\nset.seed(25051982)\n\n\n## UI #########################################################################\nui &lt;- miniPage(\n  useShinyjs(),\n  miniContentPanel(\n    wellPanel(\n      h4(\"Korrelogramme interpretieren\"),\n      htmlOutput(\"prompt_task\"),\n      plotOutput(\"plot\", height = \"400px\", width = \"400px\")\n      ),\n    shinyjs::hidden(wellPanel(id = \"feedbackpanel_task\",\n                              withSpinner(\n                              htmlOutput(\"feedback_task\"),\n                              proxy.height = \"50px\",\n                              color = \"#8cd000\"))\n                    ),\n    wellPanel(\n      uiOutput(\"ui_answers_task\"),\n      actionButton(\"show_feedback_task\", \n                   \"Prüfe meine Lösung!\",\n                   icon = icon(\"send\")),\n      actionButton(\"reshuffle_task\", \n                   \"Diese Aufgabe wiederholen\",\n                   icon = icon(\"repeat\")),\n      actionButton(\"new_task\", \n                   \"Neue Aufgabe derselben Art\",\n                   icon = icon(\"plus\"))\n    )      \n  )  \n)\n\n\n\nserver &lt;- function(input, output, session) {\n  \n  \n  # Global functions ###########################################################\n  ## round2 rounds .5 upwards\n  round2 = function(x, n) {\n    posneg = sign(x)\n    z = abs(x)*10^n\n    z = z + 0.5 + sqrt(.Machine$double.eps)\n    z = trunc(z)\n    z = z/10^n\n    z*posneg\n  }\n  \n  \n  ##############################################################################\n  # Backend for task  ##########################################################\n  ##############################################################################\n  \n  ## Matrix with variables and values\n  shape &lt;- reactive({\n    input$new_task\n    \n    sample(c(\"unif\", \"skew1\", \n             \"skew2\", \"normal\",\"u\"))\n    })\n  \n  data &lt;- reactive({\n    input$new_task\n    \n    data &lt;- \n      tibble(u = sample(distribution_beta(100, .6, .6), 100),\n             unif = sample(distribution_beta(100, 1, 1), 100),\n             normal = sample(distribution_beta(100, 4, 4), 100),\n             skew1 = sample(distribution_beta(100, 1, 8), 100),\n             skew2 = sample(distribution_beta(100, 8, 1), 100)\n      ) %&gt;% \n      select(as.character(shape()))\n    \n    names(data) &lt;- \"A\"\n    \n    data$B &lt;- (data$A + rnorm(100, 0, sample(c(.15, 60), 1)))*sample(c(1,-1),1)\n    \n    return(data)\n  })\n  \n  output$plot &lt;- renderPlot({\n    \n    ggplot(data(), aes(A, B)) + \n      geom_point(color = \"#8CD000\") +\n      stat_smooth(se = F, method = \"lm\", color = \"#8CD000\") +\n      geom_rug(color = \"#8CD000\", alpha = .5) + \n      theme_minimal() + \n      ggtitle(\"Streudiagramm\") +\n      labs(caption = \"Die x- und y-Koordinaten jedes Punktes sind\\nauf den jeweiligen Achsen als Striche dargestellt\")\n    \n  })\n  \n  \n  \n  questions_answers &lt;- reactive({\n    input$reshuffle_task\n    input$new_task\n    tibble(\n      questions = c(\"A ist linksschief verteilt\",\n                    \"A ist rechtsschief verteilt\",\n                    \"A und B sind stark positiv korreliert\",\n                    \"A und B sind stark negativ korreliert\"),\n      answers = c(DescTools::Skew(data()$A) &lt; -1,\n                  DescTools::Skew(data()$A) &gt; 1,\n                  cor(data()$A, data()$B) &gt; .4,\n                  cor(data()$A, data()$B) &lt; -.4)\n      )%&gt;% \n      sample_frac(1)\n  })\n  \n\n  ## Render UI for Answers ###\n  output$ui_answers_task &lt;- renderUI({\n    input$reshuffle_task\n    input$new_task\n    checkboxGroupInput(\"answers_task\",\n                       \"Bitte zutreffendes ankreuzen\",\n                       questions_answers()$questions\n                       )\n  })\n  \n  ## Prompt task \n  output$prompt_task &lt;- renderText({\n    paste(\"Welche Aussagen bzgl. der graphisch dargestellten Daten sind wahr?\")\n  }) \n\n  \n  ## Correct answers ###\n  correct_answers_task &lt;- reactive({\n    questions_answers() %&gt;% \n      filter(answers == T) %&gt;% \n      pull(questions)\n  })\n  \n\n  ## Feedback task  ####\n  output$feedback_task &lt;- renderText({   \n    \n      if(setequal(correct_answers_task(), input$answers_task)){\n        HTML(paste(\"Richtig! &lt;br&gt;&lt;i&gt;\", \n                   learnr::random_praise(),\n                   \"&lt;i&gt;\"))}else{\n          HTML(paste(\"&lt;b&gt;Leider nicht korrekt!&lt;/b&gt; Richtig wäre:  &lt;br&gt;✓ \", \n                     paste(correct_answers_task(), collapse = \", &lt;br&gt;✓ \"),\n                     \"&lt;br&gt;&lt;i&gt;\",\n                     learnr::random_encouragement(),\n                     \"&lt;/i&gt;\"))\n        } \n  })\n  \n  ## Show feedback on button click \n  observeEvent(input$show_feedback_task, {\n    showElement(id = \"feedbackpanel_task\")\n  })\n  \n  ## Hide feedback on solution change or new plot type\n  observeEvent(c(input$answers_task, input$new_task), {\n    hideElement(id = \"feedbackpanel_task\")\n  })\n  \n  ## Reset answer on new plot type\n  observeEvent(c(input$reshuffle_task, input$new_task), {\n    reset(id = \"answers_task\")\n  })\n  \n  \n  \n}\n\n# Create Shiny object\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "R libs",
      "R with libs 2"
    ]
  },
  {
    "objectID": "R_lib_Shinylive_1.html",
    "href": "R_lib_Shinylive_1.html",
    "title": "R with libs 1",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 900\n\n## Task Name: Korrelogramme_deskriptiv_lesen ####################################################\n\nlibrary(shiny)\nlibrary(miniUI)\nlibrary(shinyjs)\nlibrary(dplyr)\nlibrary(learnr)\nlibrary(shinycssloaders)\nlibrary(bayestestR)\n\nset.seed(25051982)\n\n\n## UI #########################################################################\nui &lt;- miniPage(\n  useShinyjs(),\n  miniContentPanel(\n    wellPanel(\n      h4(\"Korrelogramme interpretieren\"),\n      htmlOutput(\"prompt_task\"),\n      plotOutput(\"plot\", height = \"400px\", width = \"400px\")\n      ),\n    shinyjs::hidden(wellPanel(id = \"feedbackpanel_task\",\n                              withSpinner(\n                              htmlOutput(\"feedback_task\"),\n                              proxy.height = \"50px\",\n                              color = \"#8cd000\"))\n                    ),\n    wellPanel(\n      uiOutput(\"ui_answers_task\"),\n      actionButton(\"show_feedback_task\", \n                   \"Prüfe meine Lösung!\",\n                   icon = icon(\"send\")),\n      actionButton(\"reshuffle_task\", \n                   \"Diese Aufgabe wiederholen\",\n                   icon = icon(\"repeat\")),\n      actionButton(\"new_task\", \n                   \"Neue Aufgabe derselben Art\",\n                   icon = icon(\"plus\"))\n    )      \n  )  \n)\n\n\n\nserver &lt;- function(input, output, session) {\n  \n  \n  # Global functions ###########################################################\n  ## round2 rounds .5 upwards\n  round2 = function(x, n) {\n    posneg = sign(x)\n    z = abs(x)*10^n\n    z = z + 0.5 + sqrt(.Machine$double.eps)\n    z = trunc(z)\n    z = z/10^n\n    z*posneg\n  }\n  \n  \n  ##############################################################################\n  # Backend for task  ##########################################################\n  ##############################################################################\n  \n  ## Matrix with variables and values\n  shape &lt;- reactive({\n    input$new_task\n    \n    sample(c(\"unif\", \"skew1\", \n             \"skew2\", \"normal\",\"u\"))\n    })\n  \n  data &lt;- reactive({\n    input$new_task\n    \n    data &lt;- \n      tibble(u = sample(distribution_beta(100, .6, .6), 100),\n             unif = sample(distribution_beta(100, 1, 1), 100),\n             normal = sample(distribution_beta(100, 4, 4), 100),\n             skew1 = sample(distribution_beta(100, 1, 8), 100),\n             skew2 = sample(distribution_beta(100, 8, 1), 100)\n      ) %&gt;% \n      select(as.character(shape()))\n    \n    names(data) &lt;- \"A\"\n    \n    data$B &lt;- (data$A + rnorm(100, 0, sample(c(.15, 60), 1)))*sample(c(1,-1),1)\n    \n    return(data)\n  })\n  \n  output$plot &lt;- renderPlot({\n    \n    ggplot(data(), aes(A, B)) + \n      geom_point(color = \"#8CD000\") +\n      stat_smooth(se = F, method = \"lm\", color = \"#8CD000\") +\n      geom_rug(color = \"#8CD000\", alpha = .5) + \n      theme_minimal() + \n      ggtitle(\"Streudiagramm\") +\n      labs(caption = \"Die x- und y-Koordinaten jedes Punktes sind\\nauf den jeweiligen Achsen als Striche dargestellt\")\n    \n  })\n  \n  \n  \n  questions_answers &lt;- reactive({\n    input$reshuffle_task\n    input$new_task\n    tibble(\n      questions = c(\"A ist linksschief verteilt\",\n                    \"A ist rechtsschief verteilt\",\n                    \"A und B sind stark positiv korreliert\",\n                    \"A und B sind stark negativ korreliert\"),\n      answers = c(DescTools::Skew(data()$A) &lt; -1,\n                  DescTools::Skew(data()$A) &gt; 1,\n                  cor(data()$A, data()$B) &gt; .4,\n                  cor(data()$A, data()$B) &lt; -.4)\n      )%&gt;% \n      sample_frac(1)\n  })\n  \n\n  ## Render UI for Answers ###\n  output$ui_answers_task &lt;- renderUI({\n    input$reshuffle_task\n    input$new_task\n    checkboxGroupInput(\"answers_task\",\n                       \"Bitte zutreffendes ankreuzen\",\n                       questions_answers()$questions\n                       )\n  })\n  \n  ## Prompt task \n  output$prompt_task &lt;- renderText({\n    paste(\"Welche Aussagen bzgl. der graphisch dargestellten Daten sind wahr?\")\n  }) \n\n  \n  ## Correct answers ###\n  correct_answers_task &lt;- reactive({\n    questions_answers() %&gt;% \n      filter(answers == T) %&gt;% \n      pull(questions)\n  })\n  \n\n  ## Feedback task  ####\n  output$feedback_task &lt;- renderText({   \n    \n      if(setequal(correct_answers_task(), input$answers_task)){\n        HTML(paste(\"Richtig! &lt;br&gt;&lt;i&gt;\", \n                   learnr::random_praise(),\n                   \"&lt;i&gt;\"))}else{\n          HTML(paste(\"&lt;b&gt;Leider nicht korrekt!&lt;/b&gt; Richtig wäre:  &lt;br&gt;✓ \", \n                     paste(correct_answers_task(), collapse = \", &lt;br&gt;✓ \"),\n                     \"&lt;br&gt;&lt;i&gt;\",\n                     learnr::random_encouragement(),\n                     \"&lt;/i&gt;\"))\n        } \n  })\n  \n  ## Show feedback on button click \n  observeEvent(input$show_feedback_task, {\n    showElement(id = \"feedbackpanel_task\")\n  })\n  \n  ## Hide feedback on solution change or new plot type\n  observeEvent(c(input$answers_task, input$new_task), {\n    hideElement(id = \"feedbackpanel_task\")\n  })\n  \n  ## Reset answer on new plot type\n  observeEvent(c(input$reshuffle_task, input$new_task), {\n    reset(id = \"answers_task\")\n  })\n  \n  \n  \n}\n\n# Create Shiny object\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "R libs",
      "R with libs 1"
    ]
  },
  {
    "objectID": "R_lib_Shinylive_1.html#r-shinylive-test-1",
    "href": "R_lib_Shinylive_1.html#r-shinylive-test-1",
    "title": "R with libs 1",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 900\n\n## Task Name: Korrelogramme_deskriptiv_lesen ####################################################\n\nlibrary(shiny)\nlibrary(miniUI)\nlibrary(shinyjs)\nlibrary(dplyr)\nlibrary(learnr)\nlibrary(shinycssloaders)\nlibrary(bayestestR)\n\nset.seed(25051982)\n\n\n## UI #########################################################################\nui &lt;- miniPage(\n  useShinyjs(),\n  miniContentPanel(\n    wellPanel(\n      h4(\"Korrelogramme interpretieren\"),\n      htmlOutput(\"prompt_task\"),\n      plotOutput(\"plot\", height = \"400px\", width = \"400px\")\n      ),\n    shinyjs::hidden(wellPanel(id = \"feedbackpanel_task\",\n                              withSpinner(\n                              htmlOutput(\"feedback_task\"),\n                              proxy.height = \"50px\",\n                              color = \"#8cd000\"))\n                    ),\n    wellPanel(\n      uiOutput(\"ui_answers_task\"),\n      actionButton(\"show_feedback_task\", \n                   \"Prüfe meine Lösung!\",\n                   icon = icon(\"send\")),\n      actionButton(\"reshuffle_task\", \n                   \"Diese Aufgabe wiederholen\",\n                   icon = icon(\"repeat\")),\n      actionButton(\"new_task\", \n                   \"Neue Aufgabe derselben Art\",\n                   icon = icon(\"plus\"))\n    )      \n  )  \n)\n\n\n\nserver &lt;- function(input, output, session) {\n  \n  \n  # Global functions ###########################################################\n  ## round2 rounds .5 upwards\n  round2 = function(x, n) {\n    posneg = sign(x)\n    z = abs(x)*10^n\n    z = z + 0.5 + sqrt(.Machine$double.eps)\n    z = trunc(z)\n    z = z/10^n\n    z*posneg\n  }\n  \n  \n  ##############################################################################\n  # Backend for task  ##########################################################\n  ##############################################################################\n  \n  ## Matrix with variables and values\n  shape &lt;- reactive({\n    input$new_task\n    \n    sample(c(\"unif\", \"skew1\", \n             \"skew2\", \"normal\",\"u\"))\n    })\n  \n  data &lt;- reactive({\n    input$new_task\n    \n    data &lt;- \n      tibble(u = sample(distribution_beta(100, .6, .6), 100),\n             unif = sample(distribution_beta(100, 1, 1), 100),\n             normal = sample(distribution_beta(100, 4, 4), 100),\n             skew1 = sample(distribution_beta(100, 1, 8), 100),\n             skew2 = sample(distribution_beta(100, 8, 1), 100)\n      ) %&gt;% \n      select(as.character(shape()))\n    \n    names(data) &lt;- \"A\"\n    \n    data$B &lt;- (data$A + rnorm(100, 0, sample(c(.15, 60), 1)))*sample(c(1,-1),1)\n    \n    return(data)\n  })\n  \n  output$plot &lt;- renderPlot({\n    \n    ggplot(data(), aes(A, B)) + \n      geom_point(color = \"#8CD000\") +\n      stat_smooth(se = F, method = \"lm\", color = \"#8CD000\") +\n      geom_rug(color = \"#8CD000\", alpha = .5) + \n      theme_minimal() + \n      ggtitle(\"Streudiagramm\") +\n      labs(caption = \"Die x- und y-Koordinaten jedes Punktes sind\\nauf den jeweiligen Achsen als Striche dargestellt\")\n    \n  })\n  \n  \n  \n  questions_answers &lt;- reactive({\n    input$reshuffle_task\n    input$new_task\n    tibble(\n      questions = c(\"A ist linksschief verteilt\",\n                    \"A ist rechtsschief verteilt\",\n                    \"A und B sind stark positiv korreliert\",\n                    \"A und B sind stark negativ korreliert\"),\n      answers = c(DescTools::Skew(data()$A) &lt; -1,\n                  DescTools::Skew(data()$A) &gt; 1,\n                  cor(data()$A, data()$B) &gt; .4,\n                  cor(data()$A, data()$B) &lt; -.4)\n      )%&gt;% \n      sample_frac(1)\n  })\n  \n\n  ## Render UI for Answers ###\n  output$ui_answers_task &lt;- renderUI({\n    input$reshuffle_task\n    input$new_task\n    checkboxGroupInput(\"answers_task\",\n                       \"Bitte zutreffendes ankreuzen\",\n                       questions_answers()$questions\n                       )\n  })\n  \n  ## Prompt task \n  output$prompt_task &lt;- renderText({\n    paste(\"Welche Aussagen bzgl. der graphisch dargestellten Daten sind wahr?\")\n  }) \n\n  \n  ## Correct answers ###\n  correct_answers_task &lt;- reactive({\n    questions_answers() %&gt;% \n      filter(answers == T) %&gt;% \n      pull(questions)\n  })\n  \n\n  ## Feedback task  ####\n  output$feedback_task &lt;- renderText({   \n    \n      if(setequal(correct_answers_task(), input$answers_task)){\n        HTML(paste(\"Richtig! &lt;br&gt;&lt;i&gt;\", \n                   learnr::random_praise(),\n                   \"&lt;i&gt;\"))}else{\n          HTML(paste(\"&lt;b&gt;Leider nicht korrekt!&lt;/b&gt; Richtig wäre:  &lt;br&gt;✓ \", \n                     paste(correct_answers_task(), collapse = \", &lt;br&gt;✓ \"),\n                     \"&lt;br&gt;&lt;i&gt;\",\n                     learnr::random_encouragement(),\n                     \"&lt;/i&gt;\"))\n        } \n  })\n  \n  ## Show feedback on button click \n  observeEvent(input$show_feedback_task, {\n    showElement(id = \"feedbackpanel_task\")\n  })\n  \n  ## Hide feedback on solution change or new plot type\n  observeEvent(c(input$answers_task, input$new_task), {\n    hideElement(id = \"feedbackpanel_task\")\n  })\n  \n  ## Reset answer on new plot type\n  observeEvent(c(input$reshuffle_task, input$new_task), {\n    reset(id = \"answers_task\")\n  })\n  \n  \n  \n}\n\n# Create Shiny object\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "R libs",
      "R with libs 1"
    ]
  }
]